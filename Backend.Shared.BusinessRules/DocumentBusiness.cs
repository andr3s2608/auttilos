using Backend.Shared.Entities.DTOs;
using Backend.Shared.Entities.Interface.Business;
using Backend.Shared.Entities.DTOs.Auttitulos;
using Backend.Shared.Entities.Interface.Repository;
using Backend.Shared.Entities.Responses;
using Backend.Shared.Repositories.Context;
using Backend.Shared.Utilities.Telemetry;
using Microsoft.Extensions.Caching.Distributed;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Backend.Shared.Entities.Models.Auttitulos;
using Microsoft.EntityFrameworkCore;
using System.IO;
using iText.Html2pdf;
using iText.Kernel.Pdf;
using iText.Kernel.Events;
using Backend.Shared.Utilities.Utils;

namespace Backend.Shared.BusinessRules
{
    public class DocumentBusiness : IDocumentBusiness
    {
        #region Attributes
        private readonly Utilities.Telemetry.ITelemetryException TelemetryException;
        private readonly IDocuments_typeRepository _repositorydocuments;
        private readonly IDocument_procedureRepository _repositorydocumentsprocedure;
        private readonly IProcedure_requestsRepository _repositoryprocedure;
        private readonly IFormatsRepository _repositoryformats;

        #endregion
        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="CementerioBusiness"/> class.
        /// </summary>
        /// <param name="oracleContext"></param>
        /// <param name="telemetryException"></param>
        /// <param name="cache"></param>
        public DocumentBusiness(Repositories.Context.dbaeusdsdevpamecContext pamecContext,
            Utilities.Telemetry.ITelemetryException telemetryException,
              IDocuments_typeRepository repositorydocuments,
              IDocument_procedureRepository repositorydocumentsprocedure,
              IProcedure_requestsRepository repositoryprocedure,
              IFormatsRepository repositoryformats,

        IDistributedCache cache)
        {
           
            TelemetryException = telemetryException;
            _repositorydocuments = repositorydocuments;
            _repositorydocumentsprocedure = repositorydocumentsprocedure;
            _repositoryprocedure = repositoryprocedure;
            _repositoryformats = repositoryformats;

        }

        #endregion
        #region Methods


     

        public async Task<ResponseBase<string>> addDocuments(List<DocumentsDTO> documents)
        {
            try
            {
                foreach (DocumentsDTO document in documents)
                {

                    var procedure = await _repositoryprocedure.GetAsync(x => x.IdProcedureRequest.Equals(document.IdProcedureRequest));
                    var documenttype = await _repositorydocuments.GetAsync(x => x.IdDocumentType.Equals(document.IdDocumentType));

                    var documentcreated = new Document_types_procedure();
                                        documentcreated.path = document.path;
                    documentcreated.IdProcedureRequest = document.IdProcedureRequest;
                    documentcreated.IdDocumentType = document.IdDocumentType;
                    documentcreated.is_valid = document.is_valid;
                    documentcreated.modification_date = System.DateTime.Now;
                    documentcreated.registration_date = document.registration_date;                                      

                    await _repositorydocumentsprocedure.AddAsync(documentcreated);

                }
                return new Entities.Responses.ResponseBase<string>(code: HttpStatusCode.OK,
                   message: Middle.Messages.GetOk, data: "documentos actualizados", count: 0);

            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                TelemetryException.RegisterException(ex);
                return new ResponseBase<string>(code: System.Net.HttpStatusCode.OK, message: "ha ocurrido un error mientras se traia la información", data: null);
            }
          
        }

        public async Task<ResponseBase<List<Document_types_procedure>>> getDocumentsbyid(string idrequest)
        {
            try
            {
                var result = await _repositorydocumentsprocedure.GetAllAsync(x => x.IdProcedureRequest.Equals(int.Parse(idrequest)), include: inc => (Microsoft.EntityFrameworkCore.Query.IIncludableQueryable<Document_types_procedure, object>)inc
                                                                                                                                   .Include(i => i.IdDocumentProcNavigation));

                var resultlist = new List<Document_types_procedure>();
                foreach (Document_types_procedure document in result)
                {

                    resultlist.Add(document);
                }


                return new Entities.Responses.ResponseBase<List<Document_types_procedure>>(code: HttpStatusCode.OK,
                    message: Middle.Messages.GetOk, data: resultlist, count: resultlist.Count);

            }
            catch(Exception ex)
            {
                string msg = ex.Message;
                TelemetryException.RegisterException(ex);
                return new ResponseBase<List<Document_types_procedure>>(code: System.Net.HttpStatusCode.OK, message: "ha ocurrido un error mientras se traia la información", data: null);
            }
            throw new NotImplementedException();
        }

        public async Task<ResponseBase<string>> updateDocuments(List<DocumentsDTO> documents)
        {
            try
            {
                foreach (DocumentsDTO document in documents)
                {
                    var documentupdated = new Document_types_procedure();
                    documentupdated.IdDocumentTypeProcedureRequest = document.IdDocumentTypeProcedureRequest;
                    documentupdated.path = document.path;
                    documentupdated.IdProcedureRequest = document.IdProcedureRequest;
                    documentupdated.IdDocumentType = document.IdDocumentType;
                    documentupdated.is_valid = document.is_valid;
                    documentupdated.registration_date = document.registration_date;
                    documentupdated.modification_date = System.DateTime.Now;
                    
                   
                    await _repositorydocumentsprocedure.UpdateAsync(documentupdated);

                }
                return new Entities.Responses.ResponseBase<string>(code: HttpStatusCode.OK,
                   message: Middle.Messages.GetOk, data: "documentos actualizados", count: 0);

            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                TelemetryException.RegisterException(ex);               
                return new ResponseBase<string>(code: System.Net.HttpStatusCode.OK, message: "ha ocurrido un error mientras se traia la información", data: "");
            }
           
        }


        public async Task<ResponseBase<dynamic>> GenerateCertificadoPDF(string idRequest)
        {
            try
            {


                //Imagen de encabezado
                Byte[] bytesEncabezado = Convert.FromBase64String("iVBORw0KGgoAAAANSUhEUgAAAN0AAABdCAYAAAAhdGPCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAABbuSURBVHhe7d0FtC1VGQdwukNSpKVLlJBupBHpDgEBwaV0LrpLpBsJ6QalEQWlpSUUVLq7e1y/zdl3DZu5594Tb859uv9rfeu9M7NnZs/M/u8v99wRioyMjFqRSZeRUTMy6TIyakYmXUZGzciky8ioGZl0GRk1I5MuI6NmZNJlZNSMTLqMjJqRSZeRUTMy6TIyakYmXUZGzciky8ioGZl0GRk1I5MuI6NmZNINp/jiiy8a/2sfzvH2228Xn332WWNLRh3IpBti+PTTT4vnnnuu8auaXFdccUXx8MMPN361j/fee6/41a9+VTz55JONLRl1IJNuiOHOO+8sfvnLXzZ+FcWHH35YXHbZZcUf/vCH4l//+lfx73//u5h77rmL448/vtGifbzxxhvF5JNPXtxxxx2NLRl1IJNuiGHTTTctJpxwwuKZZ54Jv2m+Sy65pFhwwQWLlVZaqVh11VWLEUccsVh22WWLv/71r8UTTzxRfPzxx6Ftq0C6SSaZpLj99tsbWzLqQCbdEMLf/va3YuKJJy5GGGGE4pRTTmlsLYpXXnml2H///YvxxhuvGGmkkcJ+/1900UWL3XbbrXjttdcaLVsD0k022WRZ09WMTLohAr7bxhtvHAhFll566aDlIhBrr7326ttPfvzjHxc33HBD8cEHHzRatYZMut4gk26IgKk4wQQT9BFq3HHHLR544IHG3q9w/vnnh30//OEPi29/+9vF9ttv39jTHjLpeoNMuiEAGm2ttdbqI1wUmi3ik08+KXbYYYdik002KW6++eZgfv785z8v3n333UaL1pFJ1xtk0g1DPPLII8WFF15Y3H///cEv+/zzzxt7vo4bb7wx+Ggp6eaYY47inXfeCW0++uij4ve//30InACT8tZbb+3b3w4y6XqDTLphiH/84x/FOuusUyy33HLFRhttVOy9995BQ1133XWBkAY90qy88srfIBwZddRRi+uvvz6cC2HTKOWXX37ZUWI7k643yKQbhmASXnnllUFjiTp+61vfKqabbrpi/vnnD+H/LbfcMvhlY489diXpyGabbdY4W/eRSdcbZNINY4hKXnrppcUM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");

                //Imagen de pie de pagina
                Byte[] bytesPieDePagina = Convert.FromBase64String("");


                // LLaves a reemplazar en el formato del certificado de aguas
                string[] keys = { "~:~nombre_solicitante~:~",
                    "~:~tipo_documento~:~",
                    "~:~numero_id~:~",
                    "~:~nombre_titulo~:~",
                    "~:~nombre_institucion~:~",
                    "~:~fecha_titulo~:~",
                    "~:~numero_acta~:~",
                    "~:~numero_libro~:~",
                    "~:~numero_folio~:~",
                    "~:~anio_titulo~:~",
                    "~:~numero_de_resolucion~:~",
                    "~:~dia_de_resolucion~:~",
                    "~:~mes_de_resolucion~:~",
                    "~:~anio_de_resolucion~:~",
                    "~:~nombre_subdirector~:~"};

                string[] meses = { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" };

                //Valores dinamicos a cargar en el certificado de aguas

                DateTime dateTime = DateTime.Now;

                var solicitud = await _repositoryprocedure.GetAsync(s => s.IdProcedureRequest == int.Parse(idRequest));

                // Console.WriteLine(solicitud.IdSolicitud);

                Console.Write(solicitud.end_date.ToString("yyyy-MM-dd"));

                string[] values = {
                    solicitud.AplicantName,
                    solicitud.IdDocument_type,
                    solicitud.IdNumber,
                    solicitud.name_profession,
                    solicitud.name_institute,
                    solicitud.end_date.ToString("yyyy-MM-dd"),
                    solicitud.graduation_certificate,
                    solicitud.book,
                    solicitud.folio,
                    solicitud.year_title+"",
                    "xxxx",
                    dateTime.Day.ToString().Length > 1 ? dateTime.Day.ToString() : "0" + dateTime.Day.ToString(),
                    meses[dateTime.Month - 1].ToUpper(),
                    dateTime.Year.ToString(),
                    "DORA DUARTE PRADA"
                   };



                //Control de certificado de acuerdo al tipo de solicitante

                Formats formato;

                formato = await _repositoryformats.GetAsync(s => s.IdFormat == int.Parse("1"));


                //Convertir HTML TO PDF y guardarlo en memoria

                MemoryStream stream = new MemoryStream();

                HtmlConverter.ConvertToPdf(DynamicChange(formato.Body, keys, values), stream);

                //Crear otras isntaciaas de MemoryStream

                //Para obtener acceso al pdf trasformado del html se almacena el array de bytes en un nuevo MemoryStream

                MemoryStream pdfStream = new MemoryStream(stream.ToArray());

                MemoryStream outputPDF = new MemoryStream();


                //Crea el PdfDocument a partir del MemoryStream de la conversion y mapear su almacenamiento en un nuevo MemoryStream


                PdfDocument pdfDoc = new PdfDocument(new PdfReader(pdfStream), new PdfWriter(outputPDF));

                // Añade el EventHandler

                pdfDoc.AddEventHandler(PdfDocumentEvent.END_PAGE, new MyEvent(bytesPieDePagina));

                // Cierra el PdfDocument
                pdfDoc.Close();

                //Se extrae el array de bystes del pdf resultante del proceso

                byte[] docBytes = outputPDF.ToArray();

                return new Entities.Responses.ResponseBase<dynamic>(code: HttpStatusCode.OK, message: "Certificado generado", data: docBytes);
            }
            catch (System.Exception ex)
            {
                var ExcepcionMessage = "";
                Exception innerExcepcion = ex;
                while (innerExcepcion != null)
                {
                    ExcepcionMessage += innerExcepcion.Message;
                    innerExcepcion = innerExcepcion.InnerException;
                }
                TelemetryException.RegisterException(ex);
                return new Entities.Responses.ResponseBase<dynamic>(code: HttpStatusCode.InternalServerError, message: ExcepcionMessage);
            }
        }

        public string DynamicChange(string body, string[] keys, string[] values)
        {
            for (int i = 0; i < keys.Length; i++)
            {
                if (keys[i] == "~:~firma~:~")
                {
                    body = body.Replace(keys[i], values[i]);
                }
                else
                {
                    body = body.Replace(keys[i], values[i].ToUpper());
                }

            }
            return body;
        }


        #endregion


    }
}
